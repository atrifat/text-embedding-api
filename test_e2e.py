# test_e2e.py
import importlib
import os

import pytest
import pytest_asyncio
from cachetools import LRUCache
from fastapi.testclient import TestClient

# Import the actual app instance
import app
import config
import embedding_processor
import model_loader
import models_config
from config import get_app_settings
from embedding_processor import get_embeddings_batch

# Define a small, fast-loading model for E2E tests
# This model should be configured in models_config.py
E2E_TEST_MODEL = "all-MiniLM-L6-v2"

# Override default model for E2E tests if needed, or ensure it's configured
# This is crucial to ensure the lifespan function warms up the correct model.
os.environ["DEFAULT_MODEL"] = E2E_TEST_MODEL
os.environ["WARMUP_ENABLED"] = "true"  # Ensure warmup runs


@pytest_asyncio.fixture(scope="module")
async def e2e_client():
    """
    Fixture to provide a TestClient that properly manages the FastAPI app's lifespan
    for end-to-end tests.
    """
    # Ensure environment variables are set before app initialization
    original_default_model = os.environ.get("DEFAULT_MODEL")
    original_warmup_enabled = os.environ.get("WARMUP_ENABLED")

    os.environ["DEFAULT_MODEL"] = E2E_TEST_MODEL
    os.environ["WARMUP_ENABLED"] = "true"

    # Reload config and app to pick up environment variable changes
    importlib.reload(config)
    importlib.reload(app)
    importlib.reload(models_config)
    importlib.reload(model_loader)  # Reload model_loader to reset its global state

    # Get current settings after reloads
    settings = get_app_settings()

    # Clear model_loader caches to force a fresh load
    model_loader.model_cache = {}
    model_loader.tokenizer_cache = {}

    # Re-initialize the embeddings cache
    embedding_processor.embeddings_cache = LRUCache(maxsize=settings.embeddings_cache_maxsize)

    # Re-warm up the model
    if settings.warmup_enabled:
        await get_embeddings_batch(["warmup"], E2E_TEST_MODEL, settings)

    # Create the TestClient within the lifespan context
    async with app.lifespan(app.app):
        yield TestClient(app.app)

    # Restore original environment variables after tests
    if original_default_model is not None:
        os.environ["DEFAULT_MODEL"] = original_default_model
    else:
        del os.environ["DEFAULT_MODEL"]

    if original_warmup_enabled is not None:
        os.environ["WARMUP_ENABLED"] = original_warmup_enabled
    else:
        del os.environ["WARMUP_ENABLED"]

    # Reload modules again to ensure original state for other tests/runs
    importlib.reload(config)
    importlib.reload(app)
    importlib.reload(models_config)


@pytest.mark.e2e
@pytest.mark.asyncio
async def test_e2e_embedding_generation_accuracy(
    e2e_client: TestClient,
):
    """
    Performs a true end-to-end test for embedding generation.
    - Uses a real, small model (all-MiniLM-L6-v2).
    - Sends an actual API request.
    - Asserts on the properties of the real embeddings generated.
    """
    test_input = "The quick brown fox jumps over the lazy dog."

    # Send request to the actual API endpoint using the fixture client
    response = e2e_client.post(
        "/v1/embeddings",
        json={
            "input": test_input,
            "model": E2E_TEST_MODEL,
            "encoding_format": "float",
        },
    )

    assert response.status_code == 200
    data = response.json()

    # Assert the overall structure of the response
    assert "data" in data
    assert len(data["data"]) == 1
    assert "usage" in data
    assert data["usage"]["prompt_tokens"] > 0
    assert data["usage"]["total_tokens"] == data["usage"]["prompt_tokens"]
    assert data["model"] == E2E_TEST_MODEL

    embedding_obj = data["data"][0]
    assert "embedding" in embedding_obj
    assert "index" in embedding_obj
    assert embedding_obj["index"] == 0

    # Get the expected dimension for the model
    expected_dimension = models_config.get_model_config(E2E_TEST_MODEL)["dimension"]
    assert len(embedding_obj["embedding"]) == expected_dimension

    # Assert that not all embedding values are zero (basic sanity check)
    assert any(val != 0.0 for val in embedding_obj["embedding"])

    # Assert that the embedding is a list of floats
    assert all(isinstance(val, float) for val in embedding_obj["embedding"])

    # This 'expected_embedding' has been pre-computed by running the
    # 'all-MiniLM-L6-v2' model on 'test_input' ("The quick brown fox jumps over the lazy dog.")
    expected_embedding = [
        0.04393356665968895,
        0.058934394270181656,
        0.04817839711904526,
        0.07754809409379959,
        0.026744423434138298,
        -0.037629563361406326,
        -0.0026050761807709932,
        -0.059943120926618576,
        -0.0024959996808320284,
        0.022072846069931984,
        0.04802596941590309,
        0.05575529485940933,
        -0.03894542157649994,
        -0.026616837829351425,
        0.0076934173703193665,
        -0.02623763307929039,
        -0.036416031420230865,
        -0.03781614080071449,
        0.07407811284065247,
        -0.04950502887368202,
        -0.05852168798446655,
        -0.0636197030544281,
        0.032435011118650436,
        0.022008534520864487,
        -0.07106376439332962,
        -0.03315778076648712,
        -0.06941038370132446,
        -0.05003741756081581,
        0.07462681084871292,
        -0.11113381385803223,
        -0.012306340970098972,
        0.03774561360478401,
        -0.028031334280967712,
        0.014535347931087017,
        -0.03155859187245369,
        -0.08058363944292068,
        0.058352623134851456,
        0.002590068383142352,
        0.0392802357673645,
        0.025769604369997978,
        0.04985060542821884,
        -0.0017562147695571184,
        -0.045529790222644806,
        0.029260758310556412,
        -0.10201722383499146,
        0.05222873017191887,
        -0.07908996939659119,
        -0.010285778902471066,
        0.009202467277646065,
        0.01307324506342411,
        -0.04047774896025658,
        -0.027792492881417274,
        0.012466724030673504,
        0.06728332489728928,
        0.06812483072280884,
        -0.007571199908852577,
        -0.006099439691752195,
        -0.04237769916653633,
        0.051781609654426575,
        -0.01567073166370392,
        0.009563537314534187,
        0.041239023208618164,
        0.02149592526257038,
        0.010429338552057743,
        0.02733498066663742,
        0.018706241622567177,
        -0.026960764080286026,
        -0.07005427032709122,
        -0.10470046103000641,
        -0.0018987949006259441,
        0.017701730132102966,
        -0.05747254565358162,
        -0.014422313310205936,
        0.00047047657426446676,
        0.0023322459310293198,
        -0.025192027911543846,
        0.04930039867758751,
        -0.050960980355739594,
        0.06319831311702728,
        0.01491653360426426,
        -0.027076682075858116,
        -0.04528756067156792,
        -0.0490594282746315,
        0.03749410808086395,
        0.0384579636156559,
        0.001568998908624053,
        0.03099224902689457,
        0.02016301639378071,
        -0.012436325661838055,
        -0.030671998858451843,
        -0.02788192592561245,
        -0.06891828030347824,
        -0.05136774107813835,
        0.021479532122612,
        0.011574726551771164,
        0.0012540832394734025,
        0.018876589834690094,
        -0.04423191025853157,
        -0.044981732964515686,
        -0.0034186788834631443,
        0.013113154098391533,
        0.020009972155094147,
        0.12109976261854172,
        0.023107480257749557,
        -0.02201603166759014,
        -0.03288470581173897,
        -0.0031550987623631954,
        0.0001178016173071228,
        0.09914985299110413,
        0.016523882746696472,
        -0.004696703515946865,
        -0.014536663889884949,
        -0.003710767487064004,
        0.09651362895965576,
        0.02859080396592617,
        0.021348178386688232,
        -0.0717645138502121,
        -0.024114210158586502,
        -0.0440940223634243,
        -0.10734687745571136,
        0.06799454241991043,
        0.1304667890071869,
        -0.07970297336578369,
        0.006795103196054697,
        -0.02375119924545288,
        -0.04616367071866989,
        -0.029965048655867577,
        -3.694101200054428e-33,
        0.07309701293706894,
        -0.022017229348421097,
        -0.08614645153284073,
        -0.07143797725439072,
        -0.06367409974336624,
        -0.07218634337186813,
        -0.005930421408265829,
        -0.023364175111055374,
        -0.02836582250893116,
        0.04774351045489311,
        -0.08061765134334564,
        -0.0015648211119696498,
        0.01384440716356039,
        -0.02862359583377838,
        -0.03353872150182724,
        -0.11377749592065811,
        -0.009176365099847317,
        -0.010810120962560177,
        0.03231961652636528,
        0.058838069438934326,
        0.03342090919613838,
        0.10798794776201248,
        -0.03727132827043533,
        -0.02967703901231289,
        0.05171898379921913,
        -0.02253386378288269,
        -0.0696091279387474,
        -0.02144750952720642,
        -0.023341048508882523,
        0.04822000116109848,
        -0.03587663546204567,
        -0.046899113804101944,
        -0.03978734463453293,
        0.11081324517726898,
        -0.014300786890089512,
        -0.11846446990966797,
        0.0582914836704731,
        -0.06258892267942429,
        -0.029404088854789734,
        0.0603238046169281,
        -0.002444142708554864,
        0.01601162552833557,
        0.026723315939307213,
        0.024953028187155724,
        -0.06493189185857773,
        -0.010680261999368668,
        0.02814643271267414,
        0.010356331244111061,
        -0.0006635604077018797,
        0.01981859840452671,
        -0.03042883798480034,
        0.006284216418862343,
        0.051526885479688644,
        -0.047537531703710556,
        -0.06444213539361954,
        0.09550321102142334,
        0.07558585703372955,
        -0.028157465159893036,
        -0.03499659150838852,
        0.10181643068790436,
        0.01987326145172119,
        -0.03680367395281792,
        0.00293523701839149,
        -0.05007454380393028,
        0.15093211829662323,
        -0.06160798296332359,
        -0.0858813002705574,
        0.007139915134757757,
        -0.013306588865816593,
        0.0780404582619667,
        0.01752505637705326,
        0.04212792590260506,
        0.0357939787209034,
        -0.13295041024684906,
        0.035697028040885925,
        -0.020311672240495682,
        0.012491036206483841,
        -0.03803551197052002,
        0.04915432259440422,
        -0.015654100105166435,
        0.12141828238964081,
        -0.08086444437503815,
        -0.046878162771463394,
        0.041084323078393936,
        -0.01843182183802128,
        0.0669691190123558,
        0.0043359496630728245,
        0.022731520235538483,
        -0.013642892241477966,
        -0.04532384127378464,
        -0.039282940328121185,
        -0.006298924796283245,
        0.052960943430662155,
        -0.03690650314092636,
        0.0711677074432373,
        2.3334334281990134e-33,
        0.10523135960102081,
        -0.04818740114569664,
        0.06959190964698792,
        0.06569762527942657,
        -0.04651499539613724,
        0.051449231803417206,
        -0.012447529472410679,
        0.03208716958761215,
        -0.09233563393354416,
        0.050093285739421844,
        -0.03288763761520386,
        0.013913912698626518,
        -0.0008702466147951782,
        -0.004909041803330183,
        0.10394640266895294,
        0.0003216193290427327,
        0.05281100049614906,
        -0.011799043044447899,
        0.02315657213330269,
        0.013176823034882545,
        -0.05259634181857109,
        0.032670196145772934,
        0.0003087370132561773,
        0.06411290168762207,
        0.03885004669427872,
        0.0588008388876915,
        0.08297930657863617,
        -0.018814966082572937,
        -0.022637715563178062,
        -0.10047364234924316,
        -0.03837526962161064,
        -0.05880811810493469,
        0.0018242363585159183,
        -0.04269953444600105,
        0.02501949667930603,
        0.06400594860315323,
        -0.0377483032643795,
        -0.006839040666818619,
        -0.0025460270699113607,
        -0.09760425984859467,
        0.01884760707616806,
        -0.0008831800660118461,
        0.017361190170049667,
        0.07107901573181152,
        0.03303932771086693,
        0.0069342409260571,
        -0.056052315980196,
        0.05146343633532524,
        -0.042954221367836,
        0.04600769281387329,
        -0.008788326755166054,
        0.03172893077135086,
        0.04939654842019081,
        0.0295189768075943,
        -0.050519224256277084,
        -0.054318711161613464,
        0.00014996911340858787,
        -0.027661437168717384,
        0.03468780219554901,
        -0.021089019253849983,
        0.013806015253067017,
        0.029988687485456467,
        0.013974478468298912,
        -0.0042646946385502815,
        -0.015033732168376446,
        -0.08760951459407806,
        -0.06850537657737732,
        -0.04281415417790413,
        0.07769451290369034,
        -0.07102853804826736,
        -0.007376950699836016,
        0.021372755989432335,
        0.013556267134845257,
        -0.07904647290706635,
        0.00547665823251009,
        0.08306638896465302,
        0.11414804309606552,
        0.0018076488049700856,
        0.08754907548427582,
        -0.041604477912187576,
        0.0155416801571846,
        -0.010120632126927376,
        -0.007324386853724718,
        0.010796543210744858,
        -0.06628166884183884,
        0.03984140232205391,
        -0.1167115643620491,
        0.06429937481880188,
        0.04029198735952377,
        -0.06547417491674423,
        0.019505202770233154,
        0.08099956810474396,
        0.05364634096622467,
        0.0767970010638237,
        -0.013485284522175789,
        -1.769190838274426e-08,
        -0.04439353570342064,
        0.009206468239426613,
        -0.08795901387929916,
        0.042692188173532486,
        0.07313648611307144,
        0.016842743381857872,
        -0.040326304733753204,
        0.018513109534978867,
        0.08441723883152008,
        -0.03744775056838989,
        0.030299628153443336,
        0.029064172878861427,
        0.06368785351514816,
        0.028975006192922592,
        -0.014726979658007622,
        0.017754271626472473,
        -0.033689532428979874,
        0.017316116020083427,
        0.0337875559926033,
        0.17682607471942902,
        -0.01755334809422493,
        -0.06030775606632233,
        -0.014339433051645756,
        -0.02385365031659603,
        -0.044553063809871674,
        -0.028985023498535156,
        -0.08967761695384979,
        -0.0017593811498954892,
        -0.026148628443479538,
        0.005939964670687914,
        -0.051835495978593826,
        0.0857279822230339,
        -0.0818399041891098,
        0.008354412391781807,
        0.040079012513160706,
        0.04177642986178398,
        0.10457353293895721,
        -0.002865617396309972,
        0.019669122993946075,
        0.0058104777708649635,
        0.013325358740985394,
        0.045100148767232895,
        -0.021758848801255226,
        -0.013949318788945675,
        -0.06869924068450928,
        -0.0029410833958536386,
        -0.031076522544026375,
        -0.10585439950227737,
        0.06916233897209167,
        -0.04241142421960831,
        -0.04676823690533638,
        -0.03647511824965477,
        0.04503998905420303,
        0.06098170205950737,
        -0.0656561404466629,
        -0.0054564448073506355,
        -0.01862267218530178,
        -0.06314849108457565,
        -0.03874370455741882,
        0.03467337787151337,
        0.05554581806063652,
        0.05216280743479729,
        0.05610653758049011,
        0.10206391662359238,
    ]

    # Assert against the ground truth using pytest.approx for floating-point comparison
    assert embedding_obj["embedding"] == pytest.approx(expected_embedding, abs=1e-6)
